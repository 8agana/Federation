from mcp.server.fastmcp import FastMCP
import os
import json
from datetime import datetime
from pathlib import Path
import mimetypes
import fnmatch
import stat
import time

# Optional imports - will gracefully handle if not installed
try:
    import exifread
    EXIF_AVAILABLE = True
except ImportError:
    EXIF_AVAILABLE = False

mcp = FastMCP("Enhanced FS with Memory")

# Define memory directory - adjust path as needed
MEMORY_DIR = Path("/Users/samuelatagana/mcp-simple/memory")
MEMORY_FILE = MEMORY_DIR / "persistent_memory.json"

# Ensure memory directory exists
MEMORY_DIR.mkdir(exist_ok=True)

@mcp.tool()
def list_files(path: str) -> str:
    """List files in the given directory"""
    try:
        return "\n".join(os.listdir(path))
    except Exception as e:
        return str(e)

@mcp.tool()
def read_file(path: str) -> str:
    """Read contents of a file"""
    try:
        with open(path, 'r') as f:
            return f.read()
    except Exception as e:
        return str(e)

@mcp.tool()
def write_file(path: str, content: str) -> str:
    """Write content to a file"""
    try:
        with open(path, 'w') as f:
            f.write(content)
        return f"Successfully wrote to {path}"
    except Exception as e:
        return f"Error writing file: {str(e)}"

@mcp.tool()
def append_file(path: str, content: str) -> str:
    """Append content to a file"""
    try:
        with open(path, 'a') as f:
            f.write(content)
        return f"Successfully appended to {path}"
    except Exception as e:
        return f"Error appending to file: {str(e)}"

@mcp.tool()
def delete_file(path: str) -> str:
    """Delete a file"""
    try:
        os.remove(path)
        return f"Successfully deleted {path}"
    except Exception as e:
        return f"Error deleting file: {str(e)}"

@mcp.tool()
def create_directory(path: str) -> str:
    """Create a directory"""
    try:
        os.makedirs(path, exist_ok=True)
        return f"Successfully created directory {path}"
    except Exception as e:
        return f"Error creating directory: {str(e)}"

# NEW TOOLS START HERE

@mcp.tool()
def get_file_metadata(path: str) -> str:
    """Get detailed metadata for a file including size, dates, and type"""
    try:
        file_path = Path(path)
        if not file_path.exists():
            return f"File not found: {path}"
        
        stats = file_path.stat()
        
        # Get file size in human-readable format
        size_bytes = stats.st_size
        if size_bytes < 1024:
            size_str = f"{size_bytes} bytes"
        elif size_bytes < 1024 * 1024:
            size_str = f"{size_bytes / 1024:.2f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            size_str = f"{size_bytes / (1024 * 1024):.2f} MB"
        else:
            size_str = f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"
        
        # Get MIME type
        mime_type, _ = mimetypes.guess_type(str(file_path))
        
        metadata = {
            "path": str(file_path),
            "name": file_path.name,
            "size": size_str,
            "size_bytes": size_bytes,
            "mime_type": mime_type or "unknown",
            "created": datetime.fromtimestamp(stats.st_birthtime).isoformat() if hasattr(stats, 'st_birthtime') else "N/A",
            "modified": datetime.fromtimestamp(stats.st_mtime).isoformat(),
            "accessed": datetime.fromtimestamp(stats.st_atime).isoformat(),
            "is_file": file_path.is_file(),
            "is_directory": file_path.is_dir(),
            "permissions": oct(stats.st_mode)[-3:],
            "owner_uid": stats.st_uid,
            "group_gid": stats.st_gid
        }
        
        return json.dumps(metadata, indent=2)
        
    except Exception as e:
        return f"Error getting file metadata: {str(e)}"

@mcp.tool()
def get_exif_data(image_path: str) -> str:
    """Extract EXIF data from image files (JPEG, TIFF, RAF, etc.)"""
    if not EXIF_AVAILABLE:
        return "EXIF functionality not available. Please install exifread: pip install exifread"
    
    try:
        with open(image_path, 'rb') as f:
            tags = exifread.process_file(f, details=False)
        
        if not tags:
            return f"No EXIF data found in {image_path}"
        
        # Extract key photography-relevant EXIF data
        exif_data = {}
        
        # Camera info
        for key in ['Image Make', 'Image Model', 'Image Software']:
            if key in tags:
                exif_data[key.replace('Image ', '')] = str(tags[key])
        
        # Shooting settings
        shooting_keys = {
            'EXIF ExposureTime': 'Shutter Speed',
            'EXIF FNumber': 'Aperture',
            'EXIF ISOSpeedRatings': 'ISO',
            'EXIF FocalLength': 'Focal Length',
            'EXIF LensModel': 'Lens',
            'EXIF ExposureMode': 'Exposure Mode',
            'EXIF WhiteBalance': 'White Balance',
            'EXIF Flash': 'Flash'
        }
        
        for exif_key, display_name in shooting_keys.items():
            if exif_key in tags:
                value = str(tags[exif_key])
                # Special formatting for some values
                if exif_key == 'EXIF FNumber':
                    try:
                        # Convert ratio to f-stop
                        if '/' in value:
                            num, denom = map(float, value.split('/'))
                            value = f"f/{num/denom:.1f}"
                    except:
                        pass
                elif exif_key == 'EXIF ExposureTime':
                    # Already formatted as fraction usually
                    value = f"{value}s"
                elif exif_key == 'EXIF FocalLength':
                    value = f"{value}mm"
                    
                exif_data[display_name] = value
        
        # Date/Time
        for key in ['EXIF DateTimeOriginal', 'EXIF DateTimeDigitized', 'Image DateTime']:
            if key in tags:
                exif_data[key.replace('EXIF ', '').replace('Image ', '')] = str(tags[key])
                break  # Use first available date
        
        # GPS data if available
        gps_keys = ['GPS GPSLatitude', 'GPS GPSLongitude', 'GPS GPSAltitude']
        gps_data = {}
        for key in gps_keys:
            if key in tags:
                gps_data[key.replace('GPS GPS', '')] = str(tags[key])
        
        if gps_data:
            exif_data['GPS'] = gps_data
        
        # Image dimensions
        for key in ['EXIF ExifImageWidth', 'EXIF ExifImageLength']:
            if key in tags:
                dimension = key.replace('EXIF Exif', '').replace('Image', '')
                exif_data[dimension] = str(tags[key])
        
        # Additional useful fields
        additional_keys = ['EXIF ColorSpace', 'EXIF ExposureBiasValue', 'EXIF MeteringMode']
        for key in additional_keys:
            if key in tags:
                exif_data[key.replace('EXIF ', '')] = str(tags[key])
        
        return json.dumps(exif_data, indent=2)
        
    except Exception as e:
        return f"Error reading EXIF data: {str(e)}"

@mcp.tool()
def search_files_by_pattern(directory: str, pattern: str, recursive: bool = True) -> str:
    """Search for files matching a pattern in a directory
    
    Args:
        directory: Directory to search in
        pattern: File pattern to match (e.g., *.RAF, IMG_*.jpg, *2025*)
        recursive: Whether to search subdirectories (default: True)
    
    Returns:
        JSON list of matching file paths with basic metadata
    """
    try:
        dir_path = Path(directory)
        if not dir_path.exists():
            return f"Directory not found: {directory}"
        
        if not dir_path.is_dir():
            return f"Path is not a directory: {directory}"
        
        matches = []
        
        if recursive:
            # Use rglob for recursive search
            for file_path in dir_path.rglob(pattern):
                if file_path.is_file():
                    matches.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "size_bytes": file_path.stat().st_size,
                        "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                    })
        else:
            # Use glob for non-recursive search
            for file_path in dir_path.glob(pattern):
                if file_path.is_file():
                    matches.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "size_bytes": file_path.stat().st_size,
                        "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                    })
        
        result = {
            "directory": str(dir_path),
            "pattern": pattern,
            "recursive": recursive,
            "match_count": len(matches),
            "matches": matches
        }
        
        return json.dumps(result, indent=2)
        
    except Exception as e:
        return f"Error searching files: {str(e)}"

# Memory management functions
@mcp.tool()
def store_memory(key: str, value: str, category: str = "general") -> str:
    """Store a key-value pair in persistent memory with optional category"""
    try:
        # Load existing memory
        memory = {}
        if MEMORY_FILE.exists():
            with open(MEMORY_FILE, 'r') as f:
                memory = json.load(f)
        
        # Ensure category exists
        if category not in memory:
            memory[category] = {}
        
        # Store with timestamp
        memory[category][key] = {
            "value": value,
            "timestamp": datetime.now().isoformat(),
            "category": category
        }
        
        # Save back
        with open(MEMORY_FILE, 'w') as f:
            json.dump(memory, f, indent=2)
        
        return f"Stored '{key}' in category '{category}'"
    except Exception as e:
        return f"Error storing memory: {str(e)}"

@mcp.tool()
def retrieve_memory(key: str = None, category: str = None) -> str:
    """Retrieve memory by key and/or category. If both None, returns all."""
    try:
        if not MEMORY_FILE.exists():
            return "No memories stored yet"
        
        with open(MEMORY_FILE, 'r') as f:
            memory = json.load(f)
        
        # Return all if no filters
        if key is None and category is None:
            return json.dumps(memory, indent=2)
        
        # Filter by category
        if category and key is None:
            return json.dumps(memory.get(category, {}), indent=2)
        
        # Search for specific key across categories
        if key and category is None:
            results = {}
            for cat, items in memory.items():
                if key in items:
                    results[cat] = items[key]
            return json.dumps(results, indent=2) if results else f"Key '{key}' not found"
        
        # Search for specific key in specific category
        if category in memory and key in memory[category]:
            return json.dumps(memory[category][key], indent=2)
        else:
            return f"Key '{key}' not found in category '{category}'"
            
    except Exception as e:
        return f"Error retrieving memory: {str(e)}"

@mcp.tool()
def update_memory(key: str, value: str, category: str = "general") -> str:
    """Update an existing memory entry"""
    return store_memory(key, value, category)

@mcp.tool()
def delete_memory(key: str, category: str = None) -> str:
    """Delete a memory entry by key, optionally within a specific category"""
    try:
        if not MEMORY_FILE.exists():
            return "No memories to delete"
        
        with open(MEMORY_FILE, 'r') as f:
            memory = json.load(f)
        
        deleted = False
        
        if category:
            # Delete from specific category
            if category in memory and key in memory[category]:
                del memory[category][key]
                deleted = True
                # Clean up empty categories
                if not memory[category]:
                    del memory[category]
        else:
            # Delete from all categories
            for cat in list(memory.keys()):
                if key in memory[cat]:
                    del memory[cat][key]
                    deleted = True
                    # Clean up empty categories
                    if not memory[cat]:
                        del memory[cat]
        
        if deleted:
            with open(MEMORY_FILE, 'w') as f:
                json.dump(memory, f, indent=2)
            return f"Deleted '{key}'" + (f" from category '{category}'" if category else " from all categories")
        else:
            return f"Key '{key}' not found"
            
    except Exception as e:
        return f"Error deleting memory: {str(e)}"

@mcp.tool()
def list_memory_categories() -> str:
    """List all memory categories"""
    try:
        if not MEMORY_FILE.exists():
            return "No memory categories yet"
        
        with open(MEMORY_FILE, 'r') as f:
            memory = json.load(f)
        
        categories = list(memory.keys())
        return "\n".join(categories) if categories else "No categories found"
        
    except Exception as e:
        return f"Error listing categories: {str(e)}"

if __name__ == "__main__":
    mcp.run()
